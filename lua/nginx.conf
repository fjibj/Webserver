
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    init_by_lua 'cjson = require "cjson"';
    server {
        listen       80;
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;
	set $resp_body "";
        location /post/ { 
		content_by_lua '
                	local tt = ngx.req.get_post_args()
			ngx.var.resp_body = tt
		'; 
	}

	location = /test {
 	   	 content_by_lua_block {
	       		 ngx.req.read_body()
			 local data = ngx.req.get_body_data()
            		 if data then
		                 ngx.say("POST body data:")
                		 ngx.print(data)
		         end

		         -- body may get buffered in a temp file:
		         local file = ngx.req.get_body_file()
	                 if file then
            		    	 ngx.say("body is in file ", file)
		         else
                		 ngx.say("no body file found")
	                 end
        		 local args, err = ngx.req.get_post_args()
		         if not args then
		             ngx.say("failed to get post args: ", err)
		             return
		         end

			 for key, val in pairs(args) do
		             if type(val) == "table" then
	               		 ngx.say(key, ": ", table.concat(val, ", "))
		             else
				 local ret,errmsg = pcall(cjson.decode,key);
				 ngx.say("ret=",ret)
		             	 for key1,val1 in pairs(errmsg) do 
				 	ngx.say(key1,":",val1)
				 end
			     end
		         end
	    	 }
	 }	
	
	location /test1 {
		content_by_lua_block {
			ngx.req.read_body()
                        local data = ngx.req.get_body_data()
			-- ngx.say("data=",data)
			local ret,errmsg = pcall(cjson.decode,data);
			-- ngx.say("ret=",ret)
				
                        for key1,val1 in pairs(errmsg) do
				-- ngx.say(key1,":",val1)
				if key1 == 'province' then 
					ngx.exec("/province/"..val1);
			      end
                        end
       		}
	}

	location /province/UN {
		proxy_pass http://10.45.53.80:80/test;
	}

	location /province/HN {
                proxy_pass http://10.45.53.80:80/test;
        }


	
        location / {
	#     echo "$request_body";
        #     proxy_pass http://10.45.53.80:9080/resweb;
            root   html;
            index  index.html index.htm;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        #error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
